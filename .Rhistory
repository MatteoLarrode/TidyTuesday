#use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(sending_country, sending_country_code=="UK","United Kingdom"),
to = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
chordDiagram(final_data)
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(sending_country, sending_country_code=="UK","United Kingdom"),
to = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(from, sending_country_code=="UK","United Kingdom"),
to = replace(to, receiving_country_code=="UK","United Kingdom"))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
top_codes <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes |
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))
chordDiagram(final_data_intersect)
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))%>%
arrange(-flow)
chordDiagram(final_data_intersect)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "f94144",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "F94144",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "c1121f",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "#c1121f",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#277da1", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#fff0f3",
Romania = "#f9c74f", "United Kingdom" = "#577590", Austria = "#ffccd5",
Belgium = "#001524", Czechia = "#cbf3f0", Germany = "#c1121f",
Spain = "#f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F15946")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 50)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 1)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.5)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.1)
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.1)
chordDiagram(final_data_intersect,
grid.col = grid.col)
library("tidyverse")
library("tidytuesdayR")
library("countrycode")
library("circlize")
# load dataset ------------------------------------------------------------
data <- tidytuesdayR::tt_load('2022-03-08')
erasmus_raw <- data$erasmus
# wrangle data ------------------------------------------------------------
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
#create dataset with countries either in top 10 receiving or sending
#top10 sending:
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
#top10 receiving:
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
#list of top countries
top_codes <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
#filter dataset to only include those countries
#include exchange if EITHER countries are in the top 10
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes |
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))%>%
arrange(-flow)
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))%>%
arrange(-flow)
# plot --------------------------------------------------------------------
#create palette depending on flag colour (https://coolors.co/)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col)
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.2)
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.4)
install.packages("ggplotify")
chord <- recordPlot()
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.4)
chord <- recordPlot()
as.ggplot(chord)+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
library("ggplotify") #convert basic plot to ggplot
as.ggplot(chord)+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
as.ggplot(ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
chord2 <- base2grob(chord)
install.packages("cowplot")
library("cowplot")
as.ggplot(ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Times New Roman"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))%>%
arrange(flow)
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.4)
#convert to ggplot object to add ggplot layers
chord <- recordPlot()
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Times New Roman"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Futura"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Futura"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Arial"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
library("extrafont")
install.packages("extrafont")
library("extrafont")
font_import()
?loadfonts
font_import()
loadfonts()
names(pdfFonts())
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="ERASMUS STUDENT MOBILITY",
subtitle="Graphic depicts movement of participants between top participating countries from 2014 to 2020",
caption="Data from Data.Europa | Chart by @tanya_shapiro")+
theme(text=element_text(family="Helvetica"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin   =margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="The Erasmus Spiderweb",
subtitle="Mobility of students participating in the Erasmus programme among top participating countries (2014-2020)",
caption="Data from Data.Europa.eu | Chart by @matteoStats")+
theme(text=element_text(family="Helvetica"),
plot.title=element_text(hjust=0.5, face="bold", size=18),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin=margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="The Erasmus Spiderweb",
subtitle="Mobility of students participating in the Erasmus programme among top participating countries (2014-2020)",
caption="Data from Data.Europa.eu | Chart by @matteoStats")+
theme(text=element_text(family="Helvetica"),
plot.title=element_text(hjust=0.5, face="bold", size=20),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=10)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin=margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="The Erasmus Spiderweb",
subtitle="Mobility of students participating in the Erasmus programme among top participating countries (2014-2020)",
caption="Data from Data.Europa.eu | Chart by @matteoStats")+
theme(text=element_text(family="Helvetica"),
plot.title=element_text(hjust=0.5, face="bold", size=20),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=15)),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin=margin(t=20))
ggplotify::as.ggplot(cowplot::ggdraw(chord))+
labs(title="The Erasmus Spiderweb",
subtitle="Mobility of students participating in the Erasmus programme among top participating countries (2014-2020)",
caption="Data from Data.Europa.eu | Chart by @matteoStats")+
theme(text=element_text(family="Helvetica"),
plot.title=element_text(hjust=0.5, face="bold", size=20),
plot.subtitle=element_text(hjust=0.5, size=12, margin=margin(t=15), face="italic"),
plot.caption=element_text(size=10, hjust=0.95, margin=margin(b=12)),
plot.margin=margin(t=20))
ggsave("erasmus_spiderweb.jpeg", height=9, width=9)
setwd("~/Desktop/Data Science/TidyTuesday/2023/Week1")
setwd("~/Desktop/Data Science/TidyTuesday/2023/Week1")
install.packages("chorddiag")
devtools::install_github("mattflor/chorddiag")
library("chorddiag")
chord_interactive <- chorddiag(chord, groupColors = grid.col)
chord_interactive <- chorddiag(final_data_intersect, groupColors = grid.col)
final_matrix <- data.matrix(final_data_intersect)
chord_interactive <- chorddiag(final_data_intersect, groupColors = grid.col)
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
View(final_matrix)
chord_interactive <- chorddiag(final_matrix , type = "bipartite", groupColors = grid.col)
library(igraph)
install.packages(igraph)
install.packages("igraph)
d
install.packages("igraph")
install.packages("tidygraph")
library("igraph") #convert data into adjacency matrix
library("tidygraph")
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect), attr = "flow"))
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
install.packages("htmlwidgets")
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
library("chorddiag") #devtools::install_github("mattflor/chorddiag")
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
View(final_data_intersect)
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=30)
library("tidyverse")
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=30)
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
library("igraph") #convert data into adjacency matrix
library("tidygraph")
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=40)
#turn df into square matrix
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
#interactive plot with chorddiag library
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=50)
#turn df into square matrix
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
#interactive plot with chorddiag library
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=60)
#turn df into square matrix
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
#interactive plot with chorddiag library
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=70)
#turn df into square matrix
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
#interactive plot with chorddiag library
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
View(final_data_intersect_filter)
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=60)
final_data_intersect_filter <- final_data_intersect %>%
filter(flow>=60)
#turn df into square matrix
final_matrix <- as.matrix(as_adjacency_matrix(as_tbl_graph(final_data_intersect_filter), attr = "flow"))
#interactive plot with chorddiag library
chord_interactive <- chorddiag(final_matrix, groupColors = grid.col)
chord_interactive
?chorddiag
View(final_matrix)
chord_interactive <- chorddiag(final_matrix)
chord_interactive
groupColors = c("#318CE7","#90be6d", "#4d908e",
"#f4f3ee", "#B33F62", "#F5EDED",
"#F3C677", "#577590","#7B1E7A",
"#000000", "#B33F62", "#c1121f",
"#F9564F")
chord_interactive <- chorddiag(final_matrix, groupColors = groupColors)
chord_interactive
groupColors = c(#4d908e", "#B33F62", "#577590",
"#F5EDED","#000000", "#318CE7",
"#F3C677", "#7B1E7A","#c1121f",
"#B33F62", "#F9564F", "#90be6d",
"#f4f3ee")
chord_interactive <- chorddiag(final_matrix, groupColors = groupColors)
chord_interactive
groupColors = c(#4d908e", "#B33F62", "#577590",
"#F5EDED","#000000", "#318CE7",
"#F3C677", "#7B1E7A","#c1121f",
"#B33F62", "#F9564F", "#90be6d",
"#f4f3ee")
groupColors = c("#4d908e", "#B33F62", "#577590",
"#F5EDED","#000000", "#318CE7",
"#F3C677", "#7B1E7A","#c1121f",
"#B33F62", "#F9564F", "#90be6d",
"#f4f3ee")
chord_interactive <- chorddiag(final_matrix, groupColors = groupColors)
chord_interactive
View(final_data_intersect_filter)
chord_interactive <- chorddiag(final_matrix)
chord_interactive
chord_interactive
