#create dataset with countries either in top 10 receiving or sending
#top10 sending:
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
#top10 receiving:
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
erasmus_top <- rbind(erasmus_top_sending,erasmus_top_receiving )
top_countries <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
final_data <- erasmus_reduced %>%
filter(
sending_country_code %in% top_countries
)
View(final_data)
final_data <- erasmus_reduced %>%
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(value=sum(participants))
View(final_data)
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv')
#which countries sends the most students abroad?
top_sending<-df%>%
filter(sending_country_code!=receiving_country_code)%>%
group_by(sending_country_code)%>%
summarise(students=sum(participants))%>%
arrange(-students)%>%
head(10)
#which countries receive the most students?
top_receiving<-df%>%
filter(sending_country_code!=receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarise(students=sum(participants))%>%
arrange(-students)%>%
head(10)
#create a list of countries that are either in the top 10 sending or top 10 receiving
#convret list of country codes to country names. manually plug in "UK", not part of iso code list
top_country_codes<-unique(c(top_sending$sending_country_code, top_receiving$receiving_country_code))
top_countries<-countrycode(top_country_codes , origin="iso2c", destination="iso.name.en")
top_countries[5]<-"United Kingdom"
data<-df%>%
#use the countrycode function to convert codes to country names for both receiving and sending countries
mutate(
to= countrycode(receiving_country_code, origin="iso2c", destination="iso.name.en"),
from= countrycode(sending_country_code , origin="iso2c", destination="iso.name.en"),
)%>%
#United Kingdom and Greece not translated with ISO country codes, override with dplyr "replace"
mutate(
to = replace(to, receiving_country_code=="UK","United Kingdom"),
from = replace(from, sending_country_code=="UK","United Kingdom"),
to = replace(to, receiving_country_code=="EL","Greece"),
from = replace(from, sending_country_code=="EL","Greece")
)%>%
#summarise number of participants by sending and receiving country code
group_by(from, to)%>%
summarise(value=sum(participants))%>%
arrange(-value)
View(data)
final_data <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(value=sum(participants))
data <- tidytuesdayR::tt_load('2022-03-08')
erasmus_raw <- data$erasmus
# wrangle data ------------------------------------------------------------
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)
#create dataset with countries either in top 10 receiving or sending
#top10 sending:
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
#top10 receiving:
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
#list of top countries
top_countries <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
#filter dataset to only include those countries
final_data <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(value=sum(participants))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
#top10 receiving:
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
#list of top countries
top_countries <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
final_data <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
final_data <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
View(final_data)
final_data <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
View(final_data)
final_data2 <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries &
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
df <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv')
#which countries sends the most students abroad?
top_sending<-df%>%
filter(sending_country_code!=receiving_country_code)%>%
group_by(sending_country_code)%>%
summarise(students=sum(participants))%>%
arrange(-students)%>%
head(10)
#which countries receive the most students?
top_receiving<-df%>%
filter(sending_country_code!=receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarise(students=sum(participants))%>%
arrange(-students)%>%
head(10)
#create a list of countries that are either in the top 10 sending or top 10 receiving
#convret list of country codes to country names. manually plug in "UK", not part of iso code list
top_country_codes<-unique(c(top_sending$sending_country_code, top_receiving$receiving_country_code))
top_countries<-countrycode(top_country_codes , origin="iso2c", destination="iso.name.en")
top_countries[5]<-"United Kingdom"
data<-df%>%
#use the countrycode function to convert codes to country names for both receiving and sending countries
mutate(
to= countrycode(receiving_country_code, origin="iso2c", destination="iso.name.en"),
from= countrycode(sending_country_code , origin="iso2c", destination="iso.name.en"),
)%>%
#United Kingdom and Greece not translated with ISO country codes, override with dplyr "replace"
mutate(
to = replace(to, receiving_country_code=="UK","United Kingdom"),
from = replace(from, sending_country_code=="UK","United Kingdom"),
to = replace(to, receiving_country_code=="EL","Greece"),
from = replace(from, sending_country_code=="EL","Greece")
)%>%
#summarise number of participants by sending and receiving country code
group_by(from, to)%>%
summarise(value=sum(participants))%>%
arrange(-value)
chord_data<-data%>%
filter(from!=to)%>%
filter(from %in% top_countries & to %in% top_countries)%>%
arrange(-value)
View(chord_data)
View(final_data2)
setdiff(erasmus_top_sending$sending_country_code, erasmus_top_receiving$receiving_country_code)
setdiff(erasmus_top_receiving$receiving_country_code, erasmus_top_sending$sending_country_code)
unique(final_data_intersect$receiving_country_code)
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries &
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
unique(final_data_intersect$receiving_country_code)
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries &
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries &
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
View(final_data_intersect)
data <- tidytuesdayR::tt_load('2022-03-08')
erasmus_raw <- data$erasmus
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries |
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_countries &
receiving_country_code %in% top_countries
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
View(final_data_intersect)
View(erasmus_reduced)
top_countries <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
top_codes <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes |
receiving_country_code %in% top_codes
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country_code, receiving_country_code)%>%
summarise(flow=sum(participants))
unique(final_data_intersect$receiving_country_code)
unique(final_data_intersect$sending_country_code)
final_data_intersect <- final_data_intersect %>%
mutate(sending_country = countrycode::countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode::countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en"))
View(final_data_intersect)
#change country code to name
final_data_intersect <- final_data_intersect %>%
#use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
warnings()
View(final_data_intersect)
final_data <- final_data_intersect %>%
#use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
chordDiagram(final_data)
library("tidyverse")
library("tidytuesdayR")
library("countrycode")
library("circlize")
install.packages("citclize")
install.packages("circlize")
chordDiagram(final_data)
library("circlize")
chordDiagram(final_data)
?chordDiagram
chordDiagram(final_data, big.gap = 30)
final_data <- final_data_intersect %>%
#use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))%>%
select(
-sending_country_code, -receiving_country_code)
final_data <- final_data_intersect %>%
#use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(sending_country, sending_country_code=="UK","United Kingdom"),
to = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
chordDiagram(final_data)
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(sending_country, sending_country_code=="UK","United Kingdom"),
to = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(from = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
to = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(from = replace(from, sending_country_code=="UK","United Kingdom"),
to = replace(to, receiving_country_code=="UK","United Kingdom"))
erasmus_reduced <- erasmus_raw %>%
select(academic_year, sending_country_code, receiving_country_code, participants)%>%
#change country code to name: #use 'countrycode' library
mutate(sending_country = countrycode(sending_country_code, origin = "iso2c", destination="iso.name.en"),
receiving_country = countrycode(receiving_country_code, origin = "iso2c", destination="iso.name.en")) %>%
#United Kingdom not translated with ISO country codes, override with dplyr "replace"
mutate(sending_country = replace(sending_country, sending_country_code=="UK","United Kingdom"),
receiving_country = replace(receiving_country, receiving_country_code=="UK","United Kingdom"))
erasmus_top_sending <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(sending_country_code)%>%
summarize(sum_sending = sum(participants))%>%
arrange(-sum_sending)%>%
head(10)
erasmus_top_receiving <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
group_by(receiving_country_code)%>%
summarize(sum_receiving = sum(participants))%>%
arrange(-sum_receiving)%>%
head(10)
top_codes <- unique(c(
erasmus_top_sending$sending_country_code,
erasmus_top_receiving$receiving_country_code
))
final_data_union <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes |
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))
#include exchange if BOTH countries are in the top 10
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))
chordDiagram(final_data_intersect)
final_data_intersect <- erasmus_reduced %>%
filter(sending_country_code != receiving_country_code)%>%
filter(
sending_country_code %in% top_codes &
receiving_country_code %in% top_codes
)%>%
group_by(sending_country, receiving_country)%>%
summarise(flow=sum(participants))%>%
arrange(-flow)
chordDiagram(final_data_intersect)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "f94144",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "F94144",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "c1121f",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "277da1", Italy = "90be6d", Lithuania = "4d908e",
Luxembourg = "f4f3ee", "Netherlands (the)" = "ff4d6d", Poland = "fff0f3",
Romania = "f9c74f", "United Kingdom" = "577590", Austria = "ffccd5",
Belgium = "001524", Czechia = "cbf3f0", Germany = "#c1121f",
Spain = "f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#277da1", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#fff0f3",
Romania = "#f9c74f", "United Kingdom" = "#577590", Austria = "#ffccd5",
Belgium = "#001524", Czechia = "#cbf3f0", Germany = "#c1121f",
Spain = "#f8961e")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F15946")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#ff4d6d", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect, grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 50)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 1)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.5)
grid.col = c(France = "#318CE7", Italy = "#90be6d", Lithuania = "#4d908e",
Luxembourg = "#f4f3ee", "Netherlands (the)" = "#B33F62", Poland = "#F5EDED",
Romania = "#F3C677", "United Kingdom" = "#577590", Austria = "#7B1E7A",
Belgium = "#000000", Czechia = "#B33F62", Germany = "#c1121f",
Spain = "#F9564F")
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.1)
chordDiagram(final_data_intersect,
grid.col = grid.col,
transparency = 0.1)
chordDiagram(final_data_intersect,
grid.col = grid.col)
